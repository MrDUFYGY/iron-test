---
interface MenuItem {
  title: string;
  description: string;
  icon: string;
  link: string;
  modalSide?: 'left' | 'right' | 'center' | 'mov';
  isOpen?: boolean;
  sugerencia?: boolean;
  backgroundColor?: string;
  iconColor?: string;
  textColor?: string;
}

interface Props {
  items: MenuItem[];
}

const { items } = Astro.props;
---

{/* Script para abrir modales automáticamente */}
<div id="menu-data" data-items={JSON.stringify(items)}></div>
{items.filter(item => item.isOpen && item.modalSide).length > 0 && (
  <script is:inline>
    (function() {
      try {
        // Obtener los items del data attribute
        const menuData = document.getElementById('menu-data');
        const menuItems = JSON.parse(menuData?.dataset.items || '[]');
        
        // Función para mostrar el loader
        function showLoader(modalId) {
          const modal = document.getElementById(modalId);
          if (!modal) return;
          
          modal.innerHTML = `
            <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
              <div class="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
                <div class="flex flex-col items-center">
                  <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
                  <p class="text-gray-700">Cargando contenido...</p>
                </div>
              </div>
            </div>`;
          modal.classList.remove('hidden');
        }

        // Función para abrir los modales después de un retraso
        async function openInitialModals() {
          console.log('[openInitialModals] Iniciando carga de modales...');
          
          // Esperar 3 segundos antes de intentar abrir los modales
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          const openModals = menuItems
            .filter(item => item.isOpen && item.modalSide)
            .map(item => ({
              link: item.link,
              modalSide: item.modalSide,
              title: item.title
            }));
          
          // Abrir cada modal marcado para abrirse inicialmente
          console.log('Modales a abrir:', openModals);
          openModals.forEach(({ link, modalSide, title }) => {
            // Utiliza la función global openModal (que a su vez llama a showModal y guarda estado)
            if (typeof window.openModal === 'function') {
              window.openModal(link, modalSide, title);
            } else if (typeof openModal === 'function') {
              openModal(link, modalSide, title);
            } else {
              // Fallback directo a showModal si openModal no está disponible
              if (typeof window.showModal === 'function') {
                window.showModal(link, modalSide, title);
              } else if (typeof showModal === 'function') {
                showModal(link, modalSide, title);
              }
            }
          });
        }

        // Esperar a que el DOM esté completamente cargado
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM fully loaded, initializing modals...');
            openInitialModals();
          });
        } else {
          console.log('DOM already loaded, initializing modals immediately...');
          openInitialModals();
        }
        
        // Usar setTimeout para asegurar que el resto del código se haya ejecutado
        setTimeout(openInitialModals, 100);
      } catch (error) {
        console.error('Error al abrir los modales:', error);
      }
    })();
  </script>
)}

<div class="menu-container">
  <div class="menu-grid">
    {items.map((item) => (
      <div 
        class="menu-item" 
        title={item.description}
        style={{
          '--menu-bg-color': item.backgroundColor || '#1e293b',
          '--menu-text-color': item.textColor || '#f8fafc',
          '--menu-icon-color': item.iconColor || '#4ade80'
        }}
      >
        <button 
          class="menu-button"
          onclick={`showModal('${item.link}', '${item.modalSide || 'center'}', '${item.title}')`}
        >
          <span class="menu-icon material-icons">{item.icon}</span>
          <span class="menu-title">{item.title}</span>
        </button>
        <a href={item.link} class="menu-link" title={`Ir a ${item.title}`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 4H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-4m-8-2l8-8m0 0v5m0-5h-5"/>
          </svg>
        </a>
      </div>
    ))}
  </div>
</div>

{/* Modal containers */}
<div id="modal-overlay" class="modal-overlay hidden"></div>
<div id="modal-left" class="modal-content hidden" style="left: 0;"></div>
<div id="modal-right" class="modal-content hidden" style="right: 0;"></div>
<!-- Modal Center -->
<div id="modal-center" class="modal-content hidden draggable" style="left: 25%; width: 50%; height: 80%; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
  <div class="modal-header" style="cursor: move; border-bottom: 1px solid #e5e7eb; padding: 1rem; display: flex; justify-content: space-between; align-items: center;">
    <span id="modal-center-title" class="modal-title" style="font-weight: 600; font-size: 1.1rem;"></span>
    <button class="close-button" onclick="closeModal('modal-center')" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; line-height: 1; padding: 0.25rem 0.5rem;">×</button>
  </div>
  <div class="modal-body" style="padding: 0; height: calc(100% - 60px); overflow: hidden;"></div>
</div>

<!-- Modal Móvil -->
<div id="modal-mov" class="modal-content hidden draggable" style="width: 80%; max-width: 400px; height: 60vh; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
  <div class="modal-header" style="cursor: move; border-bottom: 1px solid #e5e7eb; padding: 1rem; display: flex; justify-content: space-between; align-items: center;">
    <span id="modal-mov-title" class="modal-title" style="font-weight: 600; font-size: 1.1rem;"></span>
    <button class="close-button" onclick="closeModal('modal-mov')" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; line-height: 1; padding: 0.25rem 0.5rem;">×</button>
  </div>
  <div class="modal-body" style="padding: 0; height: calc(100% - 60px); overflow: hidden;"></div>
</div>
<style>
  /* Estilos adicionales específicos para esta página */
  :global(.material-icons) {
      font-family: 'Material Icons';
      font-weight: normal;
      font-style: normal;
      font-size: 24px;
      line-height: 1;
      letter-spacing: normal;
      text-transform: none;
      display: inline-block;
      white-space: nowrap;
      word-wrap: normal;
      direction: ltr;
      -webkit-font-feature-settings: 'liga';
      -webkit-font-smoothing: antialiased;
  }
</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
  .menu-container {
    padding: 1rem;
    max-width: 100%;
    margin: 0 auto;
    overflow-y: auto;
    height: 100%;
  }

  .menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    padding: 1rem 0;
  }


  .menu-item {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--menu-bg-color, #1e293b);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--menu-text-color, #f8fafc);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .menu-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .menu-button {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: none;
    border: none;
    color: inherit;
    font-size: 0.95rem;
    font-weight: 500;
    text-align: left;
    padding: 0.5rem 0;
    cursor: pointer;
    transition: color 0.2s ease;
  }

  .menu-button:hover {
    color: #60a5fa;
  }

  .menu-icon {
    font-size: 1.5rem;
    color: var(--menu-icon-color, #4ade80);
    transition: transform 0.2s ease;
  }

  .menu-button:hover .menu-icon {
    transform: scale(1.1);
  }

  .menu-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .menu-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    color: #22c55e;
    transition: all 0.2s ease;
  }

  .menu-link:hover {
    background: rgba(34, 197, 94, 0.1);
    transform: scale(1.1);
  }

  /* Modal styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    z-index: 999;
    display: none;
  }

  .modal-overlay.visible {
    display: block;
  }

  .modal-content {
    background-color: white;
    width: 50%;
    height: 100%;
    position: fixed;
    top: 9vh;
    right: 0;
    padding: 0;
    z-index: 1000;
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
    border-radius: 5px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  
  #modal-center {
    left: 25%;
    right: auto;
    width: 50%;
    height: 80%;
  }

  .modal-header {
    padding: 1rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    cursor: move;
    user-select: none;
  }

  .modal-title {
    margin: 0;
    font-weight: bold;
    color: #333;
  }

  .modal-body {
    flex: 1;
    overflow: hidden;
  }

  .draggable {
    cursor: move;
    user-select: none;
  }

  .modal-close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: #ef4444;
    color: white;
    border: none;
    border-radius: 999px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    z-index: 10;
    transition: background-color 0.3s ease, transform 0.3s ease;
  }

  .modal-close-button:hover {
    background-color: #dc2626;
    transform: scale(1.1);
  }

  .hidden {
    display: none;
  }

  /* Estilos específicos para el modal móvil */
  #modal-mov {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    height: 60vh;
    max-width: 400px;
    width: 80%;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.2);
  }

  /* Estilos para el botón de cerrar */
  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    line-height: 1;
    padding: 0.25rem 0.5rem;
    color: #666;
  }

  .close-button:hover {
    color: #000;
  }
</style>

<script is:inline>
  // Clave para almacenar el estado de los modales en localStorage
  const MODAL_STORAGE_KEY = 'modalStates';
  
  // Inicializar el estado de los modales
  let activeModals = {
    left: null,
    right: null,
    center: null,
    mov: null
  };

  // Cargar estados guardados al iniciar
  function loadModalStates() {
    try {
      const savedStates = localStorage.getItem(MODAL_STORAGE_KEY);
      if (savedStates) {
        return JSON.parse(savedStates);
      }
    } catch (e) {
      console.error('Error al cargar estados de modales:', e);
    }
    return {};
  }

  // Guardar estados actuales
  function saveModalStates() {
    try {
      const statesToSave = {};
      Object.entries(activeModals).forEach(([side, modal]) => {
        if (modal) {
          statesToSave[side] = {
            url: modal.url,
            title: modal.title,
            timestamp: Date.now()
          };
        }
      });
      localStorage.setItem(MODAL_STORAGE_KEY, JSON.stringify(statesToSave));
    } catch (e) {
      console.error('Error al guardar estados de modales:', e);
    }
  }

  // Función para abrir un modal
  function openModal(link, side, title) {
    showModal(link, side, title);
    // Actualizar el estado en el localStorage
    saveModalStates();
  }

  let isDragging = false;
  let offsetX, offsetY;
  let currentDraggedModal = null;

  function makeDraggable(modal, header) {
    header.addEventListener('mousedown', startDrag);
    
    function startDrag(e) {
      isDragging = true;
      currentDraggedModal = modal;
      
      // Calcular el offset del mouse dentro del header
      const rect = modal.getBoundingClientRect();
      offsetX = e.clientX - rect.left;
      offsetY = e.clientY - rect.top;
      
      // Aplicar estilos durante el arrastre
      modal.style.cursor = 'grabbing';
      modal.style.userSelect = 'none';
      
      document.addEventListener('mousemove', drag);
      document.addEventListener('mouseup', stopDrag);
    }
    
    function drag(e) {
      if (!isDragging) return;
      
      // Prevenir el comportamiento por defecto para evitar seleccionar texto
      e.preventDefault();
      
      // Calcular nueva posición
      let x = e.clientX - offsetX;
      let y = e.clientY - offsetY;
      
      // Limitar la posición para que no se salga de la pantalla
      const rect = currentDraggedModal.getBoundingClientRect();
      const maxX = window.innerWidth - rect.width;
      const maxY = window.innerHeight - rect.height;
      
      x = Math.max(0, Math.min(x, maxX));
      y = Math.max(0, Math.min(y, maxY));
      
      // Aplicar la nueva posición
      currentDraggedModal.style.left = `${x}px`;
      currentDraggedModal.style.top = `${y}px`;
      currentDraggedModal.style.right = 'auto';
      currentDraggedModal.style.bottom = 'auto';
      currentDraggedModal.style.transform = 'none'; // Eliminar transform si existe
    }
    
    function stopDrag() {
      isDragging = false;
      if (currentDraggedModal) {
        currentDraggedModal.style.cursor = 'move';
        currentDraggedModal.style.userSelect = 'auto';
      }
      document.removeEventListener('mousemove', drag);
      document.removeEventListener('mouseup', stopDrag);
      
      // Guardar la posición después de arrastrar
      saveModalStates();
    }
  }

  function showModal(url, side, title) {
    const modalId = `modal-${side}`;
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');

    // Cerrar el modal actual si ya está abierto
    if (activeModals[side]) {
      closeModal(modalId, false);
    }
    
    // Actualizar el estado del modal
    activeModals[side] = { url, title };
    
    // Actualizar el localStorage
    saveModalStates();
    
    // Resetear posición inicial
    if (side === 'center') {
      modal.style.left = '25%';
      modal.style.top = '10vh';
      modal.style.transform = 'none';
    } else if (side === 'mov') {
      // Centrar el modal móvil
      modal.style.left = '50%';
      modal.style.top = '50%';
      modal.style.transform = 'translate(-50%, -50%)';
    }

    // Mostrar overlay solo para el modal centrado, no para el móvil
    if (side === 'center') {
      overlay.classList.remove('hidden');
      overlay.classList.add('visible');
    } else if (side === 'mov') {
      // Para el modal móvil, aseguramos que el overlay esté oculto
      overlay.classList.add('hidden');
      overlay.classList.remove('visible');
    }

    // Crear contenido del modal según el tipo
    if (side === 'center' || side === 'mov') {
      // Para el modal centrado o móvil (ambos arrastrables)
      const titleElement = modal.querySelector(`#${modalId}-title`);
      if (titleElement) {
        titleElement.textContent = title;
      }
      
      const modalBody = modal.querySelector('.modal-body');
      if (modalBody) {
        modalBody.innerHTML = `
          <iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>
        `;
      }
      
      // Hacer el modal arrastrable
      const header = modal.querySelector('.modal-header');
      if (header) {
        makeDraggable(modal, header);
      }
    } else {
      // Para los modales laterales (comportamiento original)
      modal.innerHTML = `
        <iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>
        <button onclick="closeModal('${modalId}')" class="modal-close-button">Cerrar</button>
        <div style="
          background-color: #22c55e;
          color: white;
          border-radius: 999px;
          padding: 0.5rem 1rem;
          position: absolute; 
          top: 1rem; 
          left: 1rem; 
          font-weight: bold;
          z-index: 10;
        ">${title}</div>
        <style>
          .modal-close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 999px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            z-index: 10;
            transition: background-color 0.3s ease, transform 0.3s ease;
          }
          .modal-close-button:hover {
            background-color: #dc2626;
            transform: scale(1.1);
          }
        </style>
      `;
    }

    // Mostrar el modal y actualizar el seguimiento
    modal.classList.remove('hidden');
    activeModals[side] = { url, title };
    
    // Asegurarse de que el modal esté en la parte superior
    modal.style.zIndex = '1001';

    // Agregar listener para la tecla Escape
    document.addEventListener('keydown', handleEscapeKey);
  }

  function closeModal(modalId, updateStorage = true) {
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');
    
    if (!modal) return;
    
    modal.classList.add('hidden');
    overlay.classList.remove('visible');
    overlay.classList.add('hidden');
    
    // Limpiar solo el contenido del body para los modales arrastrables
    if (modalId === 'modal-center' || modalId === 'modal-mov') {
      const modalBody = modal.querySelector('.modal-body');
      const modalTitle = modal.querySelector('.modal-title');
      if (modalBody) modalBody.innerHTML = '';
      if (modalTitle) modalTitle.textContent = '';
    } else {
      modal.innerHTML = '';
    }
    
    const side = modalId.replace('modal-', '');
    activeModals[side] = null;
    
    // Actualizar el localStorage si es necesario
    if (updateStorage) {
      saveModalStates();
    }

    // Remover listeners de arrastre
    isDragging = false;
    currentDraggedModal = null;

    // Remover listener de tecla Escape si no hay modales activos
    if (!activeModals.left && !activeModals.right && !activeModals.center && !activeModals.mov) {
      document.removeEventListener('keydown', handleEscapeKey);
    }
  }

  function handleEscapeKey(event) {
    if (event.key === 'Escape') {
      if (activeModals.left) closeModal('modal-left');
      if (activeModals.right) closeModal('modal-right');
      if (activeModals.center) closeModal('modal-center');
    }
  }
</script>