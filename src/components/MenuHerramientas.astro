---
interface MenuItem {
  title: string;
  description: string;
  icon: string;
  link: string;
  modalSide?: 'left' | 'right' | 'center';
  isOpen?: boolean;
  sugerencia?: boolean;
  backgroundColor?: string;
  iconColor?: string;
  textColor?: string;
}

interface Props {
  items: MenuItem[];
}

const { items } = Astro.props;

---

{/* Script para abrir modales automáticamente */}
{items.filter(item => item.isOpen && item.modalSide).length > 0 && (
  <script is:inline>
    // Serializa los items para usarlos en el contexto del navegador
    const items = JSON.parse('{JSON.stringify(items)}');
    // Función para abrir los modales
    function openInitialModals() {
      // Verificar si showModal está definido
      if (typeof window.showModal !== 'function') {
        console.warn('showModal function is not defined yet');
        // Reintentar después de un breve retraso
        setTimeout(openInitialModals, 100);
        return;
      }

      // Obtener los modales que deben abrirse automáticamente
      const openModals = Array.from({length: items.length})
        .map((_, i) => items[i])
        .filter(item => item.isOpen && item.modalSide)
        .map(item => ({
          link: item.link,
          modalSide: item.modalSide,
          title: item.title
        }));
      
      console.log('Opening modals:', openModals);
      
      // Abrir cada modal con un pequeño retraso entre ellos
      openModals.forEach((item, index) => {
        setTimeout(() => {
          console.log('Attempting to open modal:', item);
          if (item.link && item.modalSide && typeof window.showModal === 'function') {
            window.showModal(item.link, item.modalSide, item.title);
          } else {
            console.warn('Cannot open modal - missing required properties or showModal function');
          }
        }, 300 * (index + 1)); // Retraso de 300ms entre modales
      });
    }

    // Esperar a que el DOM esté completamente cargado
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM fully loaded, initializing modals...');
        openInitialModals();
      });
    } else {
      console.log('DOM already loaded, initializing modals immediately...');
      // Usar setTimeout para asegurar que el resto del código se haya ejecutado
      setTimeout(openInitialModals, 100);
    }
  </script>
)}

<div class="menu-container">
  <div class="menu-grid">
    {items.map((item) => (
      <div 
        class="menu-item" 
        title={item.description}
        style={{
          '--menu-bg-color': item.backgroundColor || '#1e293b',
          '--menu-text-color': item.textColor || '#f8fafc',
          '--menu-icon-color': item.iconColor || '#4ade80'
        }}
      >
        <button 
          class="menu-button"
          onclick={`showModal('${item.link}', '${item.modalSide || 'center'}', '${item.title}')`}
        >
          <span class="menu-icon material-icons">{item.icon}</span>
          <span class="menu-title">{item.title}</span>
        </button>
        <a href={item.link} class="menu-link" title={`Ir a ${item.title}`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 4H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-4m-8-2l8-8m0 0v5m0-5h-5"/>
          </svg>
        </a>
      </div>
    ))}
  </div>
</div>

{/* Modal containers */}
<div id="modal-overlay" class="modal-overlay hidden"></div>
<div id="modal-left" class="modal-content hidden" style="left: 0;"></div>
<div id="modal-right" class="modal-content hidden" style="right: 0;"></div>
<div id="modal-center" class="modal-content hidden draggable" style="left: 25%; width: 50%;">
  <div class="modal-header" style="cursor: move;">
    <span id="modal-center-title" class="modal-title"></span>
  </div>
  <div class="modal-body"></div>
</div>
<style>
  /* Estilos adicionales específicos para esta página */
  :global(.material-icons) {
      font-family: 'Material Icons';
      font-weight: normal;
      font-style: normal;
      font-size: 24px;
      line-height: 1;
      letter-spacing: normal;
      text-transform: none;
      display: inline-block;
      white-space: nowrap;
      word-wrap: normal;
      direction: ltr;
      -webkit-font-feature-settings: 'liga';
      -webkit-font-smoothing: antialiased;
  }
</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
  .menu-container {
    padding: 1rem;
    max-width: 100%;
    margin: 0 auto;
    overflow-y: auto;
    height: 100%;
  }

  .menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    padding: 1rem 0;
  }


  .menu-item {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--menu-bg-color, #1e293b);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--menu-text-color, #f8fafc);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .menu-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .menu-button {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: none;
    border: none;
    color: inherit;
    font-size: 0.95rem;
    font-weight: 500;
    text-align: left;
    padding: 0.5rem 0;
    cursor: pointer;
    transition: color 0.2s ease;
  }

  .menu-button:hover {
    color: #60a5fa;
  }

  .menu-icon {
    font-size: 1.5rem;
    color: var(--menu-icon-color, #4ade80);
    transition: transform 0.2s ease;
  }

  .menu-button:hover .menu-icon {
    transform: scale(1.1);
  }

  .menu-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .menu-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    color: #22c55e;
    transition: all 0.2s ease;
  }

  .menu-link:hover {
    background: rgba(34, 197, 94, 0.1);
    transform: scale(1.1);
  }

  /* Modal styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    z-index: 999;
    display: none;
  }

  .modal-overlay.visible {
    display: block;
  }

  .modal-content {
    background-color: white;
    width: 50%;
    height: 80%;
    position: fixed;
    top: 10vh;
    right: 0;
    padding: 0;
    z-index: 1000;
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  
  #modal-center {
    left: 25%;
    right: auto;
    width: 50%;
    height: 80%;
  }

  .modal-header {
    padding: 1rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    cursor: move;
    user-select: none;
  }

  .modal-title {
    margin: 0;
    font-weight: bold;
    color: #333;
  }

  .modal-body {
    flex: 1;
    overflow: hidden;
  }

  .draggable {
    cursor: move;
    user-select: none;
  }

  .modal-close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: #ef4444;
    color: white;
    border: none;
    border-radius: 999px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    z-index: 10;
    transition: background-color 0.3s ease, transform 0.3s ease;
  }

  .modal-close-button:hover {
    background-color: #dc2626;
    transform: scale(1.1);
  }

  .hidden {
    display: none;
  }
</style>

<script is:inline>
  // Inicializar el estado de los modales
  const activeModals = {
    left: null,
    right: null,
    center: null
  };

  // Función para abrir un modal
  function openModal(link, side, title) {
    showModal(link, side, title);
  }

  let isDragging = false;
  let offsetX, offsetY;
  let currentDraggedModal = null;

  function makeDraggable(modal, header) {
    header.addEventListener('mousedown', startDrag);
    
    function startDrag(e) {
      isDragging = true;
      currentDraggedModal = modal;
      
      // Calcular el offset del mouse dentro del header
      const rect = modal.getBoundingClientRect();
      offsetX = e.clientX - rect.left;
      offsetY = e.clientY - rect.top;
      
      // Aplicar estilos durante el arrastre
      modal.style.cursor = 'grabbing';
      modal.style.userSelect = 'none';
      
      document.addEventListener('mousemove', drag);
      document.addEventListener('mouseup', stopDrag);
    }
    
    function drag(e) {
      if (!isDragging) return;
      
      // Actualizar posición del modal
      currentDraggedModal.style.left = (e.clientX - offsetX) + 'px';
      currentDraggedModal.style.top = (e.clientY - offsetY) + 'px';
      
      // Resetear right para que no haya conflicto
      currentDraggedModal.style.right = 'auto';
    }
    
    function stopDrag() {
      isDragging = false;
      if (currentDraggedModal) {
        currentDraggedModal.style.cursor = 'move';
        currentDraggedModal.style.userSelect = 'auto';
      }
      document.removeEventListener('mousemove', drag);
      document.removeEventListener('mouseup', stopDrag);
    }
  }

  function showModal(url, side, title) {
    const modalId = `modal-${side}`;
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');

    // Close existing modal on this side if there is one
    if (activeModals[side]) {
      closeModal(modalId);
    }

    // Mostrar overlay solo para el modal centrado
    if (side === 'center') {
      overlay.classList.remove('hidden');
      overlay.classList.add('visible');
    }

    // Crear contenido del modal según el tipo
    if (side === 'center') {
      // Para el modal centrado (arrastrable)
      modal.querySelector('.modal-title').textContent = title;
      const modalBody = modal.querySelector('.modal-body');
      modalBody.innerHTML = `
        <iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>
        <button onclick="closeModal('${modalId}')" class="modal-close-button">Cerrar</button>
        <style>
          .modal-close-button {
            position: absolute;
            top: 0.5rem;
            right: 1rem;
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 999px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            z-index: 10;
            transition: background-color 0.3s ease, transform 0.3s ease;
          }
          .modal-close-button:hover {
            background-color: #dc2626;
            transform: scale(1.1);
          }
        </style>
      `;
    } else {
      // Para los modales laterales (comportamiento original)
      modal.innerHTML = `
        <iframe src="${url}" style="width: 100%; height: 100%; border: none;"></iframe>
        <button onclick="closeModal('${modalId}')" class="modal-close-button">Cerrar</button>
        <div style="
          background-color: #22c55e;
          color: white;
          border-radius: 999px;
          padding: 0.5rem 1rem;
          position: absolute; 
          top: 1rem; 
          left: 1rem; 
          font-weight: bold;
          z-index: 10;
        ">${title}</div>
        <style>
          .modal-close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 999px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            z-index: 10;
            transition: background-color 0.3s ease, transform 0.3s ease;
          }
          .modal-close-button:hover {
            background-color: #dc2626;
            transform: scale(1.1);
          }
        </style>
      `;
    }

    // Mostrar el modal y actualizar el seguimiento
    modal.classList.remove('hidden');
    activeModals[side] = { url, title };

    // Configurar arrastre si es el modal centrado
    if (side === 'center') {
      const header = modal.querySelector('.modal-header');
      makeDraggable(modal, header);
    }

    // Agregar listener para la tecla Escape
    document.addEventListener('keydown', handleEscapeKey);
  }

  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');
    
    modal.classList.add('hidden');
    overlay.classList.remove('visible');
    overlay.classList.add('hidden');
    
    // Limpiar solo el contenido del body para el modal centrado
    if (modalId === 'modal-center') {
      modal.querySelector('.modal-body').innerHTML = '';
      modal.querySelector('.modal-title').textContent = '';
    } else {
      modal.innerHTML = '';
    }
    
    const side = modalId.replace('modal-', '');
    activeModals[side] = null;

    // Remover listeners de arrastre
    isDragging = false;
    currentDraggedModal = null;

    // Remover listener de tecla Escape si no hay modales activos
    if (!activeModals.left && !activeModals.right && !activeModals.center) {
      document.removeEventListener('keydown', handleEscapeKey);
    }
  }

  function handleEscapeKey(event) {
    if (event.key === 'Escape') {
      if (activeModals.left) closeModal('modal-left');
      if (activeModals.right) closeModal('modal-right');
      if (activeModals.center) closeModal('modal-center');
    }
  }
</script>