---
import "../styles/global.css";
interface Props {
  activeTipo?: string;
}

const { activeTipo = "muestrario" } = Astro.props;
---

<div class="nav-selector-wrapper">
  <div class="nav-selector">
    <div class="menu-container">
      <button class="menu-toggle" aria-label="Toggle menu">
        <span class="hamburger"></span>
      </button>

      <div class="menu-content">
        <button class="menu-close" aria-label="Close menu">
          <span class="close-icon">×</span>
        </button>

        <div class="menu-section" data-section="estacion">
          <button class="section-header">
            <span>Estación</span>
            <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
            </svg>
          </button>
          <div class="section-content">
            <button class={`option-btn ${activeTipo === "muestrario" ? "active" : ""}`} data-tipo="muestrario">
              Muestrario
            </button>
            <button class={`option-btn ${activeTipo === "visor" ? "active" : ""}`} data-tipo="visor">
              Visor
            </button>
          </div>
        </div>

        <div class="menu-section" data-section="corporativo">
          <button class="section-header">
            <span>Corporativo</span>
            <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
            </svg>
          </button>
          <div class="section-content">
            <button class={`option-btn ${activeTipo === "muestrario" ? "active" : ""}`} data-tipo="muestrario">
              Muestrario
            </button>
            <button class={`option-btn ${activeTipo === "visor" ? "active" : ""}`} data-tipo="visor">
              Visor
            </button>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const navSelectorWrapper = document.querySelector('.nav-selector-wrapper');
    const menuToggle = navSelectorWrapper?.querySelector('.menu-toggle') as HTMLElement | null;
    const menuClose = navSelectorWrapper?.querySelector('.menu-close') as HTMLElement | null;
    const menuContent = navSelectorWrapper?.querySelector('.menu-content') as HTMLElement | null;
    const sectionHeaders = navSelectorWrapper?.querySelectorAll('.section-header');
    const optionBtns = navSelectorWrapper?.querySelectorAll('.option-btn[data-tipo]');

    if (!navSelectorWrapper || !menuToggle || !menuClose || !menuContent || !sectionHeaders || !optionBtns) {
      console.error('NavSelector component elements not found.');
      return;
    }

    // State management
    let isMenuOpen = false;
    let activeSectionElement: HTMLElement | null = null; // Keep track of the currently open section content element

    // Function to update menu visibility
    function updateMenuVisibility() {
      if (isMenuOpen) {
        menuContent?.classList.add('active');
        if (menuToggle) menuToggle.style.display = 'none';
        if (menuClose) menuClose.style.display = 'block';
      } else {
        menuContent?.classList.remove('active');
        if (menuToggle) menuToggle.style.display = 'block';
        if (menuClose) menuClose.style.display = 'none';
        // Close any open sections when menu closes
        if (activeSectionElement) {
          activeSectionElement.classList.remove('active');
          const arrowIcon = activeSectionElement.previousElementSibling?.querySelector('.arrow-icon');
          if (arrowIcon) (arrowIcon as HTMLElement).style.transform = 'rotate(0deg)';
          activeSectionElement = null; // Reset state
        }
      }
    }

    // Function to handle section toggling
    function handleSectionToggle(headerElement: HTMLElement) {
      const sectionContent = headerElement.nextElementSibling as HTMLElement | null; // Get the sibling section content

      if (!sectionContent) {
        console.error('Section content not found for header:', headerElement);
        return;
      }

      const isCurrentlyActive = sectionContent.classList.contains('active');
      const arrowIcon = headerElement.querySelector('.arrow-icon');

      // Close the currently open section if it's not the one being clicked
      if (activeSectionElement && activeSectionElement !== sectionContent) {
        activeSectionElement.classList.remove('active');
        const prevArrowIcon = activeSectionElement.previousElementSibling?.querySelector('.arrow-icon');
        if (prevArrowIcon) (prevArrowIcon as HTMLElement).style.transform = 'rotate(0deg)';
      }

      if (!isCurrentlyActive) {
        // Open the clicked section
        sectionContent.classList.add('active');
        activeSectionElement = sectionContent;
        if (arrowIcon) (arrowIcon as HTMLElement).style.transform = 'rotate(180deg)'; // Rotate down when open
      } else {
        // Close the clicked section
        sectionContent.classList.remove('active');
        activeSectionElement = null; // No section is active
        if (arrowIcon) (arrowIcon as HTMLElement).style.transform = 'rotate(0deg)'; // Rotate up when closed
      }
    }

    // Function to handle option selection (remains similar)
    function selectTipo(tipo: string) {
      const url = new URL(window.location.href);
      url.searchParams.set('tipo', tipo);
      window.location.href = url.toString();
    }

    // Initialize event listeners
    menuToggle.addEventListener('click', () => {
      isMenuOpen = true;
      updateMenuVisibility();
    });

    menuClose.addEventListener('click', () => {
      isMenuOpen = false;
      updateMenuVisibility();
    });

    sectionHeaders.forEach(header => {
      header.addEventListener('click', () => {
        handleSectionToggle(header as HTMLElement);
      });
    });

    optionBtns.forEach(btn => {
      const tipo = (btn as HTMLElement).dataset.tipo;
      if (tipo) {
        btn.addEventListener('click', () => {
          selectTipo(tipo);
        });
      } else {
        console.error('Option button missing data-tipo attribute:', btn);
      }
    });

    // Initial state setup: ensure menu is closed and sections are closed on load
    isMenuOpen = false; // Explicitly set initial state
    activeSectionElement = null; // Explicitly set initial state
    updateMenuVisibility(); // Apply initial visibility (will also close sections if any were open)

    // Ensure sections are all closed initially (redundant with updateMenuVisibility but safe)
    navSelectorWrapper.querySelectorAll('.section-content').forEach(section => {
        section.classList.remove('active');
    });
    // Ensure arrows are in default position initially (redundant with updateMenuVisibility but safe)
    navSelectorWrapper.querySelectorAll('.section-header .arrow-icon').forEach(arrow => {
        (arrow as HTMLElement).style.transform = 'rotate(0deg)';
    });
  });
</script>

<style>
  .nav-selector {
    position: relative;
    z-index: 1000;
  }

  .nav-selector-wrapper {
    position: relative; /* Needed for absolute positioning of toggle */
    display: flex;
    align-items: center;
    padding-left: 50px; /* Space for the toggle button */
  }

  .menu-container {
    position: relative;
  }

  .menu-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 10px;
    display: flex;
    align-items: center;
    position: absolute; /* Position toggle absolutely within wrapper */
    top: 0;
    left: 0;
  }

  .hamburger {
    display: block;
    width: 25px;
    height: 3px;
    background-color: #fff;
    position: relative;
  }

  .hamburger::before,
  .hamburger::after {
    content: '';
    position: absolute;
    width: 25px;
    height: 3px;
    background-color: #fff;
    left: 0;
  }

  .hamburger::before {
    top: -8px;
  }

  .hamburger::after {
    bottom: -8px;
  }

  .menu-close {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 24px;
    color: black; /* Changed color for better visibility on white background */
    z-index: 10;
    display: none;
  }

  .menu-content {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 250px;
    padding: 1rem;
    padding-top: 40px; /* Increased padding-top to accommodate close button */
    box-sizing: border-box;
    z-index: 5; /* Ensure menu content is below menu-close button */
  }

  .menu-content.active {
    display: block;
  }

  .menu-section {
    margin-bottom: 1rem;
  }

  .section-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background-color: #f3f4f6;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    height: 40px;
    box-sizing: border-box;
    flex-shrink: 0;
    flex-basis: auto;
  }

  .section-header span {
    flex-grow: 1;
    flex-basis: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    min-width: 0;
  }

  .section-header .arrow-icon {
    flex-shrink: 0;
    width: 16px;
    height: 16px;
    margin-left: 10px;
    transition: transform 0.3s ease; /* Added back transition for arrow rotation */
  }

  .section-header:hover {
    background-color: #e5e7eb;
  }

  .section-content {
    display: none;
    padding: 0.5rem;
  }

  .section-content.active {
    display: block;
  }

  .option-btn {
    width: 100%;
    text-align: left;
    padding: 0.5rem;
    margin: 0.25rem 0;
    background: none;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .option-btn:hover {
    background-color: #f3f4f6;
  }

  .option-btn.active {
    background-color: #e5e7eb;
    font-weight: 500;
  }
</style>
