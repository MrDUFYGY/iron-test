---
import "../../styles/menus.css";

import Layout from "../../layouts/Layout.astro";
import Separador from "../../components/Separador.astro";
import ProgressTracker from "../../components/ResumenProcesos/ProgressTracker.svelte";
import ResumenProcesosModal from "../../components/ResumenProcesos/ResumenProcesosModal.svelte";
import ResumenProcesosModal_Resumen from "../../components/ResumenProcesos/ResumenProcesosModal_Resumen.svelte";
import MenuHerramientas from "../../components/MenuHerramientas.astro";

const resumenProcesos = {
  usuario: {
    nombre: "LUIS ALVARO VILLEGAS",
    rol: "Gerente",
    correo: "luis.alvaro.villegas@hidroprueba.com",
  },
  fecha: new Date().toISOString(),
  estacion: {
    id: "EST-001",
    nombre: "Estación Central",
  },
  procesos: [
    {
      titulo: "1. Hoja de Liquidación",
      estado: "pendiente",
      subprocesos: {
        "Subida de Hoja Open Pos": false,
        "Comparación y confirmación": false,
      },
      description: "Sube la hoja de liquidación y compárala",
      icon: "description",
      link: "/hoja-liquidacion",
    },
    {
      titulo: "2. Movimientos de caja",
      estado: "iniciado",
      subprocesos: {
        "Subida de Talón bancario": true,
        "Hoja de Valores": true,
        "Comparación con resultados": true,
        "Confirmación": true,
      },
      description: "Gestiona los movimientos de caja",
      icon: "account_balance_wallet",
      link: "/movimientos-caja",
    },
    {
      titulo: "3. Nóminas",
      estado: "sellado",
      subprocesos: {
        "Subida de comprobantes": true,
        "Confirmación de nóminas ejecutivas": true,
        "Confirmación de Nóminas": true,
      },
      description: "Administra las nóminas",
      icon: "payments",
      link: "/nominas",
    },
    {
      titulo:
        "4. Listados de contadores, OpenPos, Mediciones y Lista de placas con Tag",
      estado: "alertado",
      subprocesos: {
        "Listado de contadores (Turno 1, 2, 3)": false,
        "H.L. Open Pos (Turno 1, 2, 3)**": false,
        "Mediciones con ticket (Turno 1, 2, 3)": false,
        "Lista de placas con tag (Turno 1, 2, 3)": false,
      },
      description:
        "Gestiona los listados de contadores, OpenPos, mediciones y lista de placas con tag",
      icon: "list_alt",
      link: "/listados-contadores",
    },
    {
      titulo: "5. Hojas de corte de periféricos",
      estado: "alertado",
      subprocesos: {
        "Turno 1": true,
        "Turno 2": true,
        "Turno 3": true,
      },
      description: "Administra los cortes de periféricos por turno",
      icon: "receipt_long",
      link: "/corte-perifericos",
    },
    {
      titulo: "6. Recepción de carburantes con soportes",
      estado: "validado",
      subprocesos: {
        "Subir documentación": false,
        "Factura pemex / VDM": false,
        "Veeder root": false,
      },
      description: "Controla la recepción de carburantes",
      icon: "local_gas_station",
      link: "/recepcion-carburantes",
    },
    {
      titulo: "7. Listado de remisión de periféricos",
      estado: "iniciado",
      subprocesos: {
        Formulario: false,
        "Factura del cliente": false,
        "Información adicional": false,
      },
      description: "Gestiona las remisiones de periféricos",
      icon: "assignment_returned",
      link: "/remision-perifericos",
    },
    {
      titulo: "8. Regularización de existencias (Mermas)",
      estado: "sellado",
      subprocesos: {
        "Registro de mermas": false,
        Documentación: false,
        Aprobación: false,
      },
      description: "Controla la regularización de existencias",
      icon: "inventory_2",
      link: "/regularizacion-existencias",
    },
    {
      titulo: "9. Jarreo",
      estado: "sellado",
      subprocesos: {
        Correo: false,
        "Documento de extracciones": false,
        "Documento histórico": false,
        "Ticket / Veeder root": false,
      },
      description: "Gestiona el proceso de jarreo",
      icon: "oil_barrel",
      link: "/jarreo",
    },
    {
      titulo: "10. Vales por empresa",
      estado: "iniciado",
      subprocesos: {
        "Selección de empresas": true,
        "Adjuntar PDF": true,
        Observaciones: true,
      },
      description: "Administra los vales por empresa",
      icon: "receipt",
      link: "/vales-empresa",
    },
    {
      titulo: "11. Corte de terminales con vouchers",
      estado: "iniciado",
      subprocesos: {
        "Adjuntar voucher PDF": true,
        "Segundo documento PDF": true,
      },
      description: "Gestiona el corte de terminales",
      icon: "credit_card",
      link: "/corte-terminales",
    },
    {
      titulo: "zzzz",
      estado: "iniciado",
      subprocesos: {
        "Adjuntar voucher PDF": true,
        "Segundo documento PDF": true,
      },
      description: "Gestiona el corte de terminales",
      icon: "credit_card",
      link: "/zzzz",
    },
  ],
};
interface MenuItem {
  title: string;
  description: string;
  icon: string;
  link: string;
  modalSide?: "left" | "right" | "center" | "mov";
  isOpen?: boolean;
  sugerencia?: boolean;
  backgroundColor?: string;
  iconColor?: string;
  textColor?: string;
}
const items: MenuItem[] = [
  {
    title: "Relacion de Facturas",
    description: "Relacion de Facturas VDM con Ingresos",
    icon: "receipt",
    link: "/estacion/est_valija_12RelacionFacturasIngresos", // Asegúrate de que esta ruta sea correcta
    modalSide: "mov" as const,
    isOpen: false,
    sugerencia: true,
    backgroundColor: "#1e293b",
    iconColor: "white",
    textColor: "white",
  },
  {
    title: "Ayuda",
    description: "Ayuda",
    icon: "receipt",
    link: "/estacion/form_ayuda",
    modalSide: "center" as const,
    isOpen: false,
    backgroundColor: "oklch(0.637 0.237 25.331)",
    iconColor: "white",
    textColor: "white",
  },
  {
    title: "zzzz",
    description: "zzzz",
    icon: "logout",
    link: "/zzzz",
    modalSide: "center" as const,
    isOpen: false,
    backgroundColor: "oklch(0.637 0.237 25.331)",
    iconColor: "white",
    textColor: "white",
  },
];
---

<Layout>
  <Separador
    texto="MENÚ DE ESTACIÓN"
    operadora="CR 88 SAPI DE CV"
    estacion="45"
    usuario={{
      nombre: resumenProcesos.usuario.nombre,
    }}
  />

  <div
    id="resizable-container"
    style="display: flex; width: 100%; height: 90dvh; position: relative;"
  >
    <div
      id="left-panel"
      style="width: 50%; height: 90dvh; overflow-y: auto; padding: 0px; scrollbar-width: thin; scrollbar-color: #333 #e0e0f0; position: relative;"
    >
      <div class="mx-auto bg-white rounded-xl shadow-md p-3">
        <div class="flex items-center mb-6 w-full">
          <h1 class="text-2xl font-bold uppercase">Resumen de Pólizas</h1>
          <ResumenProcesosModal
            data={JSON.stringify(resumenProcesos)}
            buttonText=""
            client:load
            buttonClass="ml-4 bg-gray-500 hover:bg-gray-600 text-white font-medium py-1.5 px-4 rounded transition"
          />
        </div>

        <form id="formulario" class="space-y-8">
          <div
            class="bg-white p-4 rounded-xl border border-gray-200 mb-6 shadow-sm"
          >
            <div
              id="resumen-procesos-header"
              class="cursor-pointer flex justify-between items-center p-3 rounded-lg hover:bg-gray-50"
            >
              <h2 class="font-bold text-gray-800">Resumen de procesos</h2>
              <span id="resumen-procesos-icon" class="text-gray-500">▼</span>
            </div>
            <div
              id="resumen-procesos-content"
              class="overflow-hidden transition-all duration-300 ease-in-out text-sm max-h-[1000px] pb-2"
              style="max-height: 1000px;"
            >
              {
                resumenProcesos.procesos.map((proceso) => {
                  const subprocesos = proceso.subprocesos || {};
                  const totalPasos = Object.keys(subprocesos).length;

                  let ultimoCompletado = 0;
                  Object.entries(subprocesos).forEach(
                    ([_, completado], index) => {
                      if (completado) ultimoCompletado = index + 1;
                    },
                  );

                  return (
                    <div class="bg-gray-50 rounded-lg border border-gray-100">
                      <ProgressTracker
                        titulo={proceso.titulo}
                        estado={proceso.estado}
                        pasoActual={ultimoCompletado}
                        totalPasos={totalPasos}
                        subprocesos={subprocesos}
                        client:load
                      />
                    </div>
                  );
                })
              }
            </div>
          </div>

          <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
            <label
              for="observaciones"
              class="block font-medium text-sm mb-2 text-gray-800"
              >Observaciones:</label
            >
            <textarea
              id="observaciones"
              class="w-full border border-gray-300 rounded p-2 text-sm"
              rows="4"
              placeholder="Escriba aquí..."></textarea>
          </div>

          <div
            class="bg-gray-50 p-4 rounded-xl border border-gray-200 grid grid-cols-1 md:grid-cols-2 gap-4"
          >
            <div>
              <label class="block font-medium mb-2 text-gray-800"
                >Nombre y firma del verificador:</label
              >
              <input
                type="text"
                value="LUIS ALVARO VILLEGAS"
                disabled
                class="w-full bg-gray-200 border border-gray-300 rounded p-2"
              />
            </div>
          </div>

          <div class="flex items-center justify-center bg-gray-100">
            <a
              href="/estacion/boton_Master"
              class="inline-block bg-blue-500 text-white px-6 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-300"
            >
              Confirmar
            </a>
          </div>
        </form>
      </div>
    </div>

    <div
      id="resizer"
      style="width: 10px; cursor: col-resize; background-color: #e0e0e0; height: 100%; position: relative; z-index: 10;"
      title="Arrastrar para ajustar"
    >
      <div
        style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 2px; height: 30px; background-color: #999;"
      >
      </div>
    </div>
    <div
      id="modal-container"
      style="flex: 1; height: 100%; overflow-y: hidden; padding: 5px; background-color: #f0f0f0;"
    >
      <div class="bg-white px-5 py-2 rounded-lg border border-gray-200">
        <h2 class="text-lg font-semibold">Menu de opciones.</h2>
        <p class="text-gray-600">
          Si necesitas ayuda con algun proceso selecciona un botón.
        </p>
      </div>
      <MenuHerramientas items={items} />
    </div>
  </div>

  <!-- Círculo con el símbolo de pregunta -->
  <div class="help-circle">?</div>

  <!-- Caja de instrucciones en la parte inferior izquierda -->
  <div class="tooltip-box">
    <p><strong>Atajos:</strong></p>
    <ul>
      <li>
        ● Botón "Subir": <kbd
          >Este botón solo aparece cuando aún no se ha realizado ninguna carga
          de archivos.</kbd>
      </li><br>
      <li>
        ● Botón "❯": <kbd
          >Este botón aparece únicamente después de haber realizado una carga de
          archivos.</kbd>
      </li> <br>
      <li>
        ● Identificador "Pendiente": <kbd
          >No se ha realizado ninguna carga de archivos.</kbd>
      </li><br>
      <li>
        ● Identificador "Iniciado": <kbd
          >Ya se han cargado algunos archivos, pero aún faltan por subir.</kbd>
      </li><br>
      <li>
        ● Identificador "Realizado": <kbd
          >Todos los archivos se han cargado correctamente.</kbd>
      </li><br>
    </ul>
  </div>
  <style>
    /* Contenedor del icono de ayuda */
    .help-circle {
      position: fixed;
      bottom: 3.8vw;
      left: 4.8vw;
      width: 50px;
      height: 50px;
      background-color: #018e2e;
      color: white;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      font-size: 24px;
      z-index: 1000;
    }

    /* Círculo exterior para el efecto de respiración */
    .help-circle::before {
      content: "";
      position: absolute;
      width: 80px; /* Tamaño inicial del círculo exterior */
      height: 80px;
      border-radius: 50%;
      background-color: rgba(
        69,
        163,
        43,
        0.5
      ); /* Color del círculo con opacidad */
      animation: breathing 2.4s infinite; /* Animación de respiración */
      z-index: -1; /* Coloca el círculo detrás del círculo principal */
    }

    /* Animación de respiración */
    @keyframes breathing {
      0% {
        transform: scale(1);
        opacity: 0.7;
      }

      50% {
        transform: scale(1.2); /* Expande el círculo */
        opacity: 0.3; /* Reduce la opacidad */
      }

      100% {
        transform: scale(1);
        opacity: 0.7;
      }
    }

    /* Tooltip con instrucciones */
    .tooltip-box {
      position: fixed;
      bottom: 8.2vw;
      left: 20px;
      background-color: rgba(105, 250, 48, 0.9);
      color: black;
      padding: 15px;
      border-radius: 6px;
      display: none; /* Oculto por defecto */
      z-index: 100;
      font-size: 14px;
      width: 300px;
    }

    /* Mostrar el tooltip cuando se pasa el ratón sobre el círculo */
    .help-circle:hover + .tooltip-box {
      display: block;
    }

    /* Flecha del tooltip */
    .tooltip-box::after {
      content: "";
      position: absolute;
      top: 100%; /* Flecha apuntando hacia el círculo */
      left: 50%;
      margin-left: -100px;
      border-width: 5px;
      border-style: solid;
      border-color: rgba(250, 235, 48, 0.9) transparent transparent transparent;
    }
  </style>

  <script>
    import { modalRightArea } from "../../components/utils/modalRightArea_estacion";
    import { initializeDivider } from "../../components/utils/divisor";

    document.addEventListener("DOMContentLoaded", () => {
      modalRightArea();

      // Inicializar el divisor con las opciones personalizadas
      initializeDivider({
        resizerId: "resizer",
        leftPanelId: "left-panel",
        containerId: "resizable-container",
        minWidth: 30,
        maxWidth: 90,
      });
    });

    // prueba
    function initResumenProcesos() {
      const header = document.getElementById("resumen-procesos-header");
      const content = document.getElementById("resumen-procesos-content");
      const icon = document.getElementById("resumen-procesos-icon");

      if (!header || !content || !icon) return;

      let isOpen = true;
      content.style.maxHeight = content.scrollHeight + "px";
      content.classList.add("pb-2");
      icon.textContent = "▲";

      header.addEventListener("click", () => {
        isOpen = !isOpen;

        if (isOpen) {
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("pb-2");
          icon.textContent = "▲";
        } else {
          content.style.maxHeight = "0";
          content.classList.remove("pb-2");
          icon.textContent = "▼";
        }
      });
    }

    document.addEventListener("DOMContentLoaded", () => {
      initResumenProcesos();
    });

    function calcularDiferencia() {
      const importeTrasladoInput = document.getElementById("importeTraslado");
      const importeResumenInput = document.getElementById("importeResumen");
      const diferenciaInput = document.getElementById("diferencia");

      if (!importeTrasladoInput || !importeResumenInput || !diferenciaInput)
        return;

      const importeTraslado = parseFloat(importeTrasladoInput.value) || 0;
      const importeResumen = parseFloat(importeResumenInput.value) || 0;
      const diferencia = importeTraslado - importeResumen;

      diferenciaInput.value = diferencia.toFixed(2);

      if (diferencia === 0) {
        diferenciaInput.classList.remove("text-red-600", "text-green-600");
        diferenciaInput.classList.add("text-gray-600");
      } else if (diferencia > 0) {
        diferenciaInput.classList.remove("text-red-600", "text-gray-600");
        diferenciaInput.classList.add("text-green-600");
      } else {
        diferenciaInput.classList.remove("text-green-600", "text-gray-600");
        diferenciaInput.classList.add("text-red-600");
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      const importeTrasladoInput = document.getElementById("importeTraslado");
      const importeResumenInput = document.getElementById("importeResumen");

      if (importeTrasladoInput)
        importeTrasladoInput.addEventListener("input", calcularDiferencia);
      if (importeResumenInput)
        importeResumenInput.addEventListener("input", calcularDiferencia);
    });
  </script>
</Layout>
