---
import Layout from '../../layouts/Layout.astro';
import Huella from '../../components/ConfirmHuella.astro';
import CustomPdfInput from '../../components/customInput/CustomPdfInput.svelte';

---

<Layout>




  
<div class="container mx-auto p-6 bg-white shadow-md font-sans">

    <!-- Modal para visualizar PDF de ventas por periodo -->
    <div id="dialog-ventas-periodo" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 overflow-hidden">
      <div class="bg-white rounded-lg p-2 max-w-4xl w-full h-full relative z-50 ">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold" id="title-ventas-periodo">Corte de terminales con voucher</h3>
          <button onclick="closeDialogVentasPeriodo()" class="text-gray-500 hover:text-gray-700">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="w-full h-[60vh] border border-gray-200 rounded-lg overflow-hidden">
          <iframe id="viewer-ventas-periodo" class="w-full h-full border-0" title="Visor PDF"></iframe>
        </div>
        <div class="flex justify-end gap-4 mt-4">
          <button onclick="closeDialogVentasPeriodo()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors">
            Cancelar
          </button>
          <button onclick="confirmarVentasPeriodo()" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
            Confirmar
          </button>
        </div>
      </div>
    </div>

    <section>
        <h2 class="text-lg font-semibold text-center mb-3 text-gray-700">Corte de terminales con voucher</h2>
        <div class="overflow-x-auto shadow-sm border border-gray-200 rounded">
        </div>
        <div class="mt-8 grid grid-cols-3 gap-4">
          <div>
            <h3 class="mb-2">Turno 1</h3>
            <CustomPdfInput groupId="ventas" title="Ventas" client:visible confirmado={true} />
          </div>
          <div>
            <h3 class="mb-2">Turno 2</h3>
            <CustomPdfInput groupId="ventas" title="Ventas" client:visible confirmado={true} />
          </div>
          <div>
            <h3 class="mb-2">Turno 3</h3>
            <CustomPdfInput groupId="ventas" title="Ventas" client:visible confirmado={true} />
          </div>
        </div>
          <Huella />
    </section>

</div>

<style>
    /* Puedes añadir CSS personalizado aquí si es necesario */
    /* Por ejemplo, para controlar saltos de línea específicos */
    /* td { white-space: nowrap; } */ /* Evitaría saltos de línea en celdas */
</style>

<script type="module">
  // Variables globales
  let ventasPeriodoFileUrl = null;
  let currentFileInput = null;

  // Función para manejar la carga de archivos
  function handleFileUpload(fileInput, file) {
    if (file && file.type === 'application/pdf') {
      currentFileInput = fileInput;
      const container = fileInput.closest('.file-upload-container');
      const fileNameDisplay = container.querySelector('.file-name');
      
      // Actualizar el nombre del archivo
      fileNameDisplay.textContent = file.name;
      
      // Mostrar el visor PDF
      showVentasPeriodoViewer(file);
    } else {
      alert('Por favor, seleccione un archivo PDF válido.');
    }
  }

  // Función para mostrar el visor PDF
  function showVentasPeriodoViewer(file) {
    ventasPeriodoFileUrl = URL.createObjectURL(file);
    
    const dialog = document.getElementById('dialog-ventas-periodo');
    const viewer = document.getElementById('viewer-ventas-periodo');
    const title = document.getElementById('title-ventas-periodo');
    
    if (dialog && viewer && title) {
      viewer.src = ventasPeriodoFileUrl;
      title.textContent = `Visualización: ${currentFileInput.id.replace('-', ' ').toUpperCase()}`;
      dialog.classList.remove('hidden');
    }
  }

  // Función para cerrar el dialog
  window.closeDialogVentasPeriodo = function() {
    const dialog = document.getElementById('dialog-ventas-periodo');
    const viewer = document.getElementById('viewer-ventas-periodo');
    
    if (!dialog || !viewer) return;
    
    dialog.classList.add('hidden');
    viewer.src = '';

    // Si se cierra sin confirmar, limpiamos el input actual
    if (currentFileInput) {
      const container = currentFileInput.closest('.file-upload-container');
      const fileNameDisplay = container.querySelector('.file-name');
      fileNameDisplay.textContent = '';
      currentFileInput.value = '';
    }
    
    // Liberar memoria de la URL del objeto
    if (ventasPeriodoFileUrl) {
      URL.revokeObjectURL(ventasPeriodoFileUrl);
      ventasPeriodoFileUrl = null;
    }
    currentFileInput = null;
  }

  // Función para confirmar el documento seleccionado
  window.confirmarVentasPeriodo = function() {
    if (currentFileInput) {
      const container = currentFileInput.closest('.file-upload-container');
      const status1 = container.querySelector('[id$="-status1"]');
      const status2 = container.querySelector('[id$="-status2"]');
      const inputContainer = container.querySelector('.relative');
      
      if (container && status1 && status2 && inputContainer) {
        // Actualizar estados visuales
        status1.classList.remove('bg-gray-200');
        status1.classList.add('bg-green-500');
        status2.classList.remove('bg-gray-200');
        status2.classList.add('bg-green-500');
        inputContainer.classList.remove('border-gray-300', 'border-blue-500');
        inputContainer.classList.add('border-green-500');
      }
    }
    closeDialogVentasPeriodo();
  }

  // Event listeners cuando el DOM esté cargado
  document.addEventListener('DOMContentLoaded', function() {
    // Configurar los event listeners para los inputs de archivo
    const fileInputs = document.querySelectorAll('input[type="file"]');
    
    fileInputs.forEach(input => {
      input.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          handleFileUpload(input, file);
        }
      });

      // Permitir arrastrar y soltar archivos
      const container = input.closest('.relative');
      if (container) {
        container.addEventListener('dragover', (e) => {
          e.preventDefault();
          container.classList.add('border-blue-500');
        });

        container.addEventListener('dragleave', () => {
          container.classList.remove('border-blue-500');
        });

        container.addEventListener('drop', (e) => {
          e.preventDefault();
          container.classList.remove('border-blue-500');
          const file = e.dataTransfer.files[0];
          if (file) {
            handleFileUpload(input, file);
          }
        });
      }
    });
  });
</script>

<script>
  // Detectar si estamos en un iframe
  const isInIframe = window.self !== window.top;
  
  if (isInIframe) {
    console.log('Esta página está siendo mostrada dentro de un iframe');
    // Aquí puedes agregar cualquier lógica específica para cuando esté en iframe
    // Por ejemplo: document.body.classList.add('iframe-mode');
  } else {
    console.log('Esta página está siendo mostrada directamente en el navegador');
  }
</script>

</Layout>