---
import Layout from "../layouts/Layout.astro";
import MenuEstacion from "../components/MenuEstacion.astro";
import Separador from "../components/Separador.astro";
import Huella from "../components/ConfirmHuella.astro";
import ProgressTracker from "../components/ResumenProcesos/ProgressTracker.svelte";
import ResumenProcesosModal from "../components/ResumenProcesos/ResumenProcesosModal.svelte";

// Datos para el resumen de procesos
const resumenProcesos = {
  usuario: {
    nombre: 'Joaquin Perez Gonzales',
    rol: 'Gerente',
    correo: 'joaquin.perez@hidroprueba.com'
  },
  fecha: new Date().toISOString(),
  estacion: {
    id: "EST-001",
    nombre: "Estación Central",
  },
  procesos: [
    {
      titulo: "1 - Hoja de Liquidacion",
      estado: "pendiente",
      subprocesos: {
        "Subida de Hoja Open Pos": true,
        "Comparación y confirmación": true,
      },
      description: "Sube la hoja de liquidación y compárala",
      icon: "description",
      link: "/hoja-liquidacion",
    },
    {
      titulo: "2 - Movimientos de caja",
      estado: "iniciado",
      subprocesos: {
        "Subida de Talón bancario": true,
        "Hoja de Valores": true,
        "Comparación con resultados": true,
        "Confirmación": true,
      },
      description: "Gestiona los movimientos de caja",
      icon: "account_balance_wallet",
      link: "/movimientos-caja",
    },
    {
      titulo: "3 - Nominas",
      estado: "sellado",
      subprocesos: {
        "Subida de comprobantes": true,
        "Confirmación de nóminas ejecutivas": true,
        "Confirmación de Nóminas": true,
      },
      description: "Administra las nóminas",
      icon: "payments",
      link: "/nominas",
    },
    {
      titulo: "4 - Listados de contadores, OpenPos, Mediciones y Corte de Perifericos por turno",
      estado: "alertado",
      subprocesos: {
        "Listado de contadores (Turno 1, 2, 3)": true,
        "H.L. Open Pos (Turno 1, 2, 3)": true,
        "Mediciones con ticket (Turno 1, 2, 3)": true,
      },
      description: "Gestiona los listados de contadores y mediciones",
      icon: "list_alt",
      link: "/listados-contadores",
    },
    {
      titulo: "5 - Recepción de carburantes",
      estado: "alertado",
      subprocesos: {
        "Turno 1": true,
        "Turno 2": false,
        "Turno 3": true,
      },
      description: "Administra los cortes de periféricos por turno",
      icon: "receipt_long",
      link: "/corte-perifericos",
    },
    {
      titulo: "6 - Listado de remisión de periféricos",
      estado: "validado",
      subprocesos: {
        "Subir documentación": true,
        "Factura pemex / VDM": true,
        "Veeder root": true,
      },
      description: "7 - Regularización de existencias (Mermas)",
      icon: "local_gas_station",
      link: "/recepcion-carburantes",
    },
    {
      titulo: "8 - Jarreo",
      estado: "iniciado",
      subprocesos: {
        "Formulario": true,
        "Factura del cliente": true,
        "Información adicional": true,
      },
      description: "Gestiona las remisiones de periféricos",
      icon: "assignment",
      link: "/remision-perifericos",
    },

  ],
};
---

<Layout>
  <Separador
    texto="MENÚ DE ESTACIÓN"
    operadora="CR 88 SAPI DE CV"
    estacion="45"
    usuario={{
      nombre: "LUIS ALVARO VILLEGAS",
    }}
  />

    <div style="display: flex; justify-content: space-between; width: 100%; align-items: flex-start; height: 90dvh;">
        <div style="width: 50%; height: 100%; margin-left: 1vw; border-right: 1px solid #ccc; overflow-y: auto; padding: 0px; scrollbar-width: thin; scrollbar-color: #333 #e0e0e0;">
            <!-- Contenido para la Hoja de Información (Caratula) -->
            <div class=" mx-auto bg-white rounded-xl shadow-md p-3">
                <div class="mb-6">
                    <h1 class="text-2xl font-bold uppercase mb-4">Resumen de Polizas</h1>
                </div>

        <form id="formulario" class="space-y-8">
          <!-- Resumen de Procesos -->
          <div
            class="bg-white p-4 rounded-xl border border-gray-200 mb-4 shadow-sm"
          >
            <div
              id="resumen-procesos-header"
              class="cursor-pointer flex justify-between items-center p-3 rounded-lg hover:bg-gray-50"
            >
              <h2 class="font-bold text-gray-800">Resumen de procesos</h2>
              <span id="resumen-procesos-icon" class="text-gray-500">▼</span>
            </div>
            <div
              id="resumen-procesos-content"
              class="overflow-hidden transition-all duration-300 ease-in-out text-sm max-h-0"
            >
              {
                resumenProcesos.procesos.map((proceso) => {
                  const subprocesos = proceso.subprocesos || {};
                  const totalPasos = Object.keys(subprocesos).length;

                  // Encontrar el último paso completado
                  let ultimoCompletado = 0;
                  Object.entries(subprocesos).forEach(
                    ([_, completado], index) => {
                      if (completado) ultimoCompletado = index + 1;
                    },
                  );

                  return (
                    <div class="bg-gray-50  rounded-lg border border-gray-100">
                      <ProgressTracker
                        titulo={proceso.titulo}
                        estado={proceso.estado}
                        pasoActual={ultimoCompletado}
                        totalPasos={totalPasos}
                        subprocesos={subprocesos}
                        client:load
                      />
                    </div>
                  );
                })
              }
              <!-- Resumen Procesos Modal -->
              <div class="mt-4">
                <ResumenProcesosModal
                  data={JSON.stringify(resumenProcesos)}
                  buttonText="Imprimir el resumen completo"
                  client:load
                />
              </div>
            </div>
          </div>

                    <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
                        <label for="observaciones" class="block font-medium text-sm mb-2 text-gray-800">Observaciones:</label>
                        <textarea id="observaciones" class="w-full border border-gray-300 rounded p-2 text-sm" rows="4" placeholder="Escriba aquí..."></textarea>
                    </div>
                    
                    <!-- Firma y turno -->
                    <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 grid grid-cols-1 md:grid-cols-2 gap-4">

                      <div>
                        <label class="block font-medium mb-2 text-gray-800">Nombre y firma del verificador:</label>
                        <input type="text" value="LUIS ALVARO VILLEGAS" disabled class="w-full bg-gray-200 border border-gray-300 rounded p-2">
                      </div>
                    </div>
                    
                    <!-- Botones -->

          <div class="flex items-center justify-center  bg-gray-100">
          <button
            onclick="window.location.href='/boton_Master'"
            class="bg-blue-500 text-white px-6 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-300"
          >
            Confirmar
          </button>
          </div>

        </form>
      </div>
    </div>
    <div
      id="modal-container"
      style="width: 50%; height: 100%; overflow-y: hidden; padding: 5px; background-color: #f0f0f0; "
    >
      <!-- Espacio para Modales -->
      <div class="bg-white px-5 py-2 rounded-lg border border-gray-200">
        <h2 class="text-lg font-semibold">Menu de procesos.</h2>
        <p class="text-gray-600">
          Puedes ingresar al proceso deseado o seguir la hoja .
        </p>
        <!-- Aquí se cargará el contenido del modal -->
      </div>
      <MenuEstacion
        items={resumenProcesos.procesos.map(proceso => ({
          title: proceso.titulo,
          description: proceso.description,
          icon: proceso.icon,
          link: proceso.link,
        }))}
      />
    </div>
  </div>

  <script>

const modalUrlMap: Record<string, string> = {
  'modal-hoja-liquidacion-contador' : '/corp_valija_1hojaLiquidacion', //1
  'modal-movimientos-caja-contador' : '/corp_valija_2resultadosBusqueda', //2
  'modal-nominas-contador' : '/corp_valija_3nominas', //3
  'modal-listado-contadores-contador' : '/corp_valija_4sistemaArchivosxTurno', //4
  'modal-recepcion-carburantes-contador' : '/corp_valija_5historicoCarburante', //5
  'modal-listado-remision-perifericos-contador' : '/corp_valija_6resultadoVentasxPeriodo', //6
  'modal-regularizacion-mermas-contador' : '/corp_valija_7resultadosMermasRegul', //7
  'modal-jarreo-contador' : '/corp_valija_8jarreo', //8 
 
    };
    // Función para abrir el contenido en el panel del modal
    document.addEventListener("click", function (event) {
      const target = (event.target as HTMLElement).closest(
        "[data-modal-target]",
      );
      if (target) {
        event.preventDefault();
        const modalId = target.getAttribute("data-modal-target") || "";
        const modalContainer = document.getElementById("modal-container");

        if (modalContainer && modalId && modalUrlMap[modalId]) {
          const url = modalUrlMap[modalId];

          // Guardar el contenido original del menú si no está guardado
          if (!window._originalMenuContent) {
            window._originalMenuContent = modalContainer.innerHTML;
          }

          // Limpiar contenido anterior
          modalContainer.innerHTML = "";

          // Crear el iframe para cargar la página
          const iframe = document.createElement("iframe");
          iframe.src = url;
          iframe.style.width = "100%";
          iframe.style.height = "85%";
          iframe.style.border = "none";
          iframe.title = "Contenido del modal";

          // Agregar título al modal
          const modalHeader = document.createElement("div");
          modalHeader.className =
            "relative sticky top-0 bg-white p-4 mb-4 rounded-lg shadow flex items-center justify-between z-50";

          const modalTitle = document.createElement("h2");
          modalTitle.className = "text-xl font-semibold text-gray-800";
          modalTitle.textContent =
            "Detalle de " + modalId.replace("modal-", "").replace(/-/g, " ");

          const closeButton = document.createElement("button");
          closeButton.className =
            "ml-4 bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-600 transition-colors";
          closeButton.textContent = "Cerrar";
          closeButton.onclick = function () {
            // Restaurar el menú original sin recargar
            const modalContainer = document.getElementById("modal-container");
            if (modalContainer && window._originalMenuContent) {
              modalContainer.innerHTML = window._originalMenuContent;
              window._originalMenuContent = null;
            }
          };

          modalHeader.appendChild(modalTitle);
          modalHeader.appendChild(closeButton);

          modalContainer.appendChild(modalHeader);
          modalContainer.appendChild(iframe);
        }
      }
    });

    // Script para calcular la diferencia (del formulario original)
    // Función para manejar la sección de Resumen de Procesos
    function initResumenProcesos() {
      const header = document.getElementById("resumen-procesos-header");
      const content = document.getElementById("resumen-procesos-content");
      const icon = document.getElementById("resumen-procesos-icon");

      if (!header || !content || !icon) return;

      // Inicialmente cerrado
      let isOpen = false;

      header.addEventListener("click", () => {
        isOpen = !isOpen;

        if (isOpen) {
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("pb-2");
          icon.textContent = "▲";
        } else {
          content.style.maxHeight = "0";
          content.classList.remove("pb-2");
          icon.textContent = "▼";
        }
      });
    }

    // Función para manejar la sección de Documentos que integran la póliza
    function initDocumentosPoliza() {
      const header = document.getElementById("documentos-poliza-header");
      const content = document.getElementById("documentos-poliza-content");
      const icon = document.getElementById("documentos-poliza-icon");

      if (!header || !content || !icon) return;

      // Inicialmente abierto
      let isOpen = true;
      content.style.maxHeight = content.scrollHeight + "px";

      header.addEventListener("click", () => {
        isOpen = !isOpen;

        if (isOpen) {
          content.style.maxHeight = content.scrollHeight + "px";
          icon.textContent = "▲";
        } else {
          content.style.maxHeight = "0";
          icon.textContent = "▼";
        }
      });
    }

    // Función para manejar la sección de Métodos de pago
    function initMetodosPago() {
      const header = document.getElementById("metodos-pago-header");
      const content = document.getElementById("metodos-pago-content");
      const icon = document.getElementById("metodos-pago-icon");

      if (!header || !content || !icon) return;

      // Inicialmente cerrado
      let isOpen = true;
      content.style.maxHeight = content.scrollHeight + "px";

      header.addEventListener("click", () => {
        isOpen = !isOpen;

        if (isOpen) {
          content.style.maxHeight = content.scrollHeight + "px";
          content.classList.add("pb-2");
          icon.textContent = "▲";
        } else {
          content.style.maxHeight = "0";
          content.classList.remove("pb-2");
          icon.textContent = "▼";
        }
      });
    }

    // Inicializar todas las secciones
    document.addEventListener("DOMContentLoaded", () => {
      initResumenProcesos();
      initDocumentosPoliza();
      initMetodosPago();
    });

    function calcularDiferencia() {
      const importeTrasladoInput = document.getElementById(
        "importeTraslado",
      ) as HTMLInputElement;
      const importeResumenInput = document.getElementById(
        "importeResumen",
      ) as HTMLInputElement;
      const diferenciaInput = document.getElementById(
        "diferencia",
      ) as HTMLInputElement;

      if (!importeTrasladoInput || !importeResumenInput || !diferenciaInput)
        return;

      const importeTraslado = parseFloat(importeTrasladoInput.value) || 0;
      const importeResumen = parseFloat(importeResumenInput.value) || 0;
      const diferencia = importeTraslado - importeResumen;

      diferenciaInput.value = diferencia.toFixed(2);

      // Cambiar color según la diferencia
      if (diferencia === 0) {
        diferenciaInput.classList.remove("text-red-600", "text-green-600");
        diferenciaInput.classList.add("text-gray-600");
      } else if (diferencia > 0) {
        diferenciaInput.classList.remove("text-red-600", "text-gray-600");
        diferenciaInput.classList.add("text-green-600");
      } else {
        diferenciaInput.classList.remove("text-green-600", "text-gray-600");
        diferenciaInput.classList.add("text-red-600");
      }
    }

    // Agregar event listeners a los inputs de diferencia
    const importeTrasladoInput = document.getElementById("importeTraslado");
    const importeResumenInput = document.getElementById("importeResumen");

    if (importeTrasladoInput) {
      importeTrasladoInput.addEventListener("input", calcularDiferencia);
    }
    if (importeResumenInput) {
      importeResumenInput.addEventListener("input", calcularDiferencia);
    }

    // Manejar el envío del formulario para evitar recarga
    const form = document.getElementById("formulario");
    if (form) {
      form.addEventListener("submit", (event) => {
        event.preventDefault();
        // Aquí podrías agregar la lógica para guardar el formulario
        console.log("Formulario simulado guardado.");
      });
    }
  </script>

  <style>
    .muestrario-collapse-section {
      position: relative;
      width: 100%;
    }
    .muestrario-collapse-header {
      transition: background-color 0.3s ease;
      padding: 10px;
      border-radius: 0.5rem;
      user-select: none;
    }
    .muestrario-collapse-header:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }
    .muestrario-collapse-icon {
      transition:
        transform 0.3s ease,
        color 0.3s ease;
      display: inline-block;
    }
    /* Estilos para las secciones colapsables */
    #resumen-procesos-content,
    #documentos-poliza-content,
    #metodos-pago-content {
      transition: max-height 0.3s ease-out;
      overflow: hidden;
    }

    /* Estilo para los botones de verificación */
    .verification-button {
      background-color: #2563eb;
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 0.375rem;
      font-size: 0.875rem;
      font-weight: 500;
      transition: background-color 0.2s;
    }

    .verification-button:hover {
      background-color: #1d4ed8;
    }
  </style>
</Layout>
