---
import Layout from '../layouts/Layout.astro';
import { fetchWithSSL } from '../fetchWithSSL';
 


let datos = [];
let error = null;
let cargando = true;
let rawResponse = null;

try {
  console.log('Iniciando petición a la API...');
  
  const url = 'https://localhost:44345/api/Valija/GetAll';
  const options = {
    method: 'GET',
    headers: {
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache'
    }
  };

  console.log('Realizando petición a:', url);
  const respuesta = await fetchWithSSL(url, options);
  
  console.log('Respuesta recibida, estado:', respuesta.status);
  rawResponse = await respuesta.text();
  console.log('Respuesta en texto plano:', rawResponse);
  
  try {
    const resultado = JSON.parse(rawResponse);
    console.log('Respuesta parseada:', resultado);
    
    if (resultado.Success && Array.isArray(resultado.Data)) {
      datos = resultado.Data;
      console.log('Datos extraídos correctamente. Total de registros:', datos.length);
    } else {
      throw new Error('Formato de respuesta inesperado');
    }
  } catch (parseError) {
    console.error('Error al parsear la respuesta:', parseError);
    throw new Error('Error al procesar la respuesta del servidor');
  }
} catch (err: any) {
  console.error('Error en la petición:', {
    message: err.message,
    stack: err.stack,
    rawResponse
  });
  error = `Error: ${err.message}`;
} finally {
  cargando = false;
  console.log('Estado final:', { cargando, error, datosLength: datos.length });
}
---

<Layout>
  <div class="p-6 max-w-7xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Listado de Valijas</h1>
    
    {cargando ? (
      <div class="flex justify-center items-center p-8">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        <p class="ml-4">Cargando datos...</p>
      </div>
    ) : error ? (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
        <p class="font-bold">Error</p>
        <pre class="whitespace-pre-wrap">{error}</pre>
        {rawResponse && (
          <details class="mt-2">
            <summary class="text-sm cursor-pointer">Ver respuesta del servidor</summary>
            <pre class="whitespace-pre-wrap text-xs mt-2 bg-gray-100 p-2 rounded overflow-auto max-h-60">{rawResponse}</pre>
          </details>
        )}
      </div>
    ) : datos.length === 0 ? (
      <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4">
        <p>No se encontraron datos de valijas.</p>
      </div>
    ) : (
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-200">
          <thead>
            <tr class="bg-gray-100">
              {Object.keys(datos[0] || {}).map((encabezado) => (
                <th 
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  {encabezado}
                </th>
              ))}
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            {datos.map((fila, index) => (
              <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                {Object.values(fila).map((valor, i) => (
                  <td 
                    class="px-6 py-4 whitespace-nowrap text-sm text-gray-700"
                  >
                    {valor !== null && valor !== undefined ? String(valor) : '-'}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    )}
  </div>

  <script>
    // Mostrar los datos en la consola del navegador
    const datosCliente = JSON.parse(decodeURIComponent("${encodeURIComponent(JSON.stringify(datos))}"));
    console.log('Datos cargados desde el servidor:', datosCliente);
    console.log('Total de valijas:', datosCliente.length);
  </script>
</Layout>

<style>
  /* Estilos para la tabla */
  table {
    border-collapse: collapse;
    width: 100%;
  }
  
  th, td {
    border: 1px solid #e2e8f0;
    padding: 0.75rem;
    text-align: left;
  }
  
  th {
    background-color: #f8fafc;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.05em;
  }
  
  tr:hover {
    background-color: #f7fafc;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>